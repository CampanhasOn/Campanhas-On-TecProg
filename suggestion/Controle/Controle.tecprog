Pacote: controle.servlet

/controle.servlet / CarregarParseCampanha.java

public class CarregarParseCampanha extends HttpServlet
Comentário: Servlet to control the loading parse campaign
Sugestão: LoadCampaignParse

PrintWriter saida = response.getWriter();
Sugestão: PrintWriter output = response.getWriter

FileItem arquivo = null;
Sugestão: FileItem file = null;

int linhaInicial = 1;
Sugestão: int initialLine = 1;

String tipoArquivo = "campanha";
Sugestão: String fileType = "campaign";

String divisao = ";";
Sugestão: String division = ";";

----------------------------------------------------------------------------------------------------

/contole.servlet / CarregarParseMovimentacoes.java

public class CarregarParseMovimentacoes extends HttpServlet
Comentário: Servlet to control the loading parse financial transactions
Sugestão: LoadTransactionsParse

PrintWriter saida = response.getWriter();
Sugestão: PrintWriter output = response.getWriter();

FileItem arquivo = null;
Sugestão: FileItem file = null; 

String tipoArquivo = "";
Sugestão: String fileType = "";

String ano = "";
Sugestão: String electionYear = "";

String divisao = ";";
Sugestão: String division = ";";

int linhaInicial = 1;
Sugestão: int initialLine = 1;

----------------------------------------------------------------------------------------------------

/ controle.servlet / CarregarParsePartido.java

public class CarregarParsePartido extends HttpServlet
Comentário: Servlet to control the loading parse political parties
Sugestão: LoadPoliticalPartiesParse

PrintWriter saida = response.getWriter();
Sugestão: PrintWriter output = response.getWriter();

FileItem arquivo = null;
Sugestão: FileItem file = null;

int linhaInicial = 1;
Sugestão: int InitialLine = 1;

String tipoArquivo = "partido";
Sugestão: String fileType = "political parties";

String divisao = ";";
Sugestão: String division = ";";

----------------------------------------------------------------------------------------------------

/ controle.servlet / Logica.java

public interface Logica 
Comentário: Interface to implement the logic of dynamic display of indices of pages
Sugestão: Logic

String executa(HttpServletRequest req,
            HttpServletResponse res) throws Exception
Comentário: Method signatures to implement the logic of dynamic display of indices of pages
Sugestão: String execute (HttpServletRequest req,
            HttpServletResponse res) throws Exception
            
----------------------------------------------------------------------------------------------------

/ controle.servlet / RequisitarMovimentacoesDeCandidato.java

public class RequisitarMovimentacoesDeCandidato implements Logica
Comentário: Servlet requests to control display search result list of financial transactions a candidate
Sugestão: public class RequestFinancialTransactionsOfCandidate implements Logic

private CampanhaControle campanhaControle;
Sugestão: private ControlCampaign controlCampaign

private Campanha campanhaBusca;
Sugestão: private Campaign searchCampaign

private Campanha campanha;
Sugestão: private Campaign campaign 

private MovimentacaoControle movimentacaoControle;
Sugestão: TransactionsControl transactionsControl

private String despesaTot;
Sugestão: private String totalExpense

private float despesaTC;
Sugestão: private float totalExpenseCalculatedValue

private float receitaTC;
Sugestão: private float totalRevenueCalculatedValue

private List<Receita> listaReceita;
Sugestão: private List<Revenue> revenueList

private List<Despesa> listaDespesa;
Sugestão: private List<Expense> expenseList

private HttpServletRequest req;
Sugestão: private HttpServletRequest request

private int inicioR;
Sugestão: private int firstRevenue

private int inicioD;
Sugestão: private int firstExpense

private int qtdPorPaginaR;
Sugestão: private int quantityRevenuePerPage

private int qtdPorPaginaD;
Sugestão: private int quantityExpensePerPage

private boolean verTodosR;
Sugestão: private boolean seeAllRevenues

private boolean verTodosD;
Sugestão: private boolean seeAllExpenses

private int indiceR;
Sugestão: private int revenueIndex

private int indiceD;
Sugestão: private int expenseIndex

private int qtdDePPR;
Sugestão: private int quantityOfPPR

private int qtdDePPD;
Sugestão: private int quantityOfPPD

private int centroR;
Sugestão: private int centerOfRevenue

private int minRaioR;
Sugestão: private int minimumRadiusRevenue

private int maxRaioR;
Sugestão: private int maximumRadiusRevenue

private int centroD;
Sugestão: private int centerOfExpense

private int minRaioD;
Sugestão: private int minimumRadiusExpense

private int maxRaioD;
Sugestão: private int maximumRadiusExpense

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing method that implements requests for display the result of the search list of financial transactions
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)

private void recebeParametros() throws SQLException 
Comentário: Receive methods for the parameters of the request
Sugestao: private void receiveParameters

private void estabeleceParametros() throws Exception 
Comentário: Establishes what each parameter will receive
Sugestão: private void setParameters

private void preparaEnvioDeParametros()
Comentário: Prepare responses of forwarded requests
Sugestão: private void prepareParametersTransmission

private int geraIndiceDaListaR(List<Receita> lista, int divisor)
Comentário:Generate indexes for list of receipt
Sugestão: private int generateIndexListOfRevenue(List<Revenue> list, int divider)

int indice
Sugestão: int index

private int geraIndiceDePaginacaoR(List<Receita> lista)
Comentário: Generate index list for paging of receipt
Sugestão: private int generateIndexPageOfRevenue(List<Revenue> list)

private int geraIndiceDaListaD(List<Despesa> lista, int divisor)
Comentário: Generate indexes for list of expenses
Sugestão: private int generateIndexListOfExpense(List<Expense> list, int divider)

private int geraIndiceDePaginacaoD(List<Despesa> lista)
Comentário: Generate index list for paging of expenses
Sugestão: private generateIndexPageOfExpense(List<Expense> list)

240 -private void estabeleceRaioDePaginacaoR()
Comentário: Logic for implementing paging of receipt
Sugestão: private void setPageRadiusRevenue

241 - int cont = 0;
Sugestão: int counter 

private void estabeleceRaioDePaginacaoD()
Comentário: Logic for implementing paging of expenses
Sugestão: private void setPageRadiusExpense

private String formataDespesa(Float despesa) 
Comentário: Logic to implement the format of expenses
Sugestão: private String formatOfExpenses

private Campanha constroiCampanha(HttpServletRequest req)
Comentário: Set a political campaign according to the parameters requested by an Http request  
Sugestão: private Campaign buildCampaign(HttpServletRequest request)

int numero
Sugestão: int candidateNumber

int cargo_cod
Sugestão: int codeOfPosition

String uf
Sugestão: String fedetativeUnit

----------------------------------------------------------------------------------------------------

/ controle.servlet / RequisitarPartido.java

public class RequisitarPartido implements Logica
Comentário: Servlet to request control of political parties
Sugestão: public class RequestPoliticalParty implements Logic

private PartidoControle controle;
Sugestão: private PolicalPartyControl control

private List<Partido> listaPartidos;
Sugestão: private List<PoliticalParty> politicalPartyList

private HttpServletRequest req;
Sugestão: private HttpServletRequest request

private int inicio;
Sugestão: private int firstPoliticalParty

private int qtdPorPagina;
Sugestão: private int quantityPoliticalPartyPerPage

private boolean verTodos;
Sugestão: private boolean seeAllPoliticalParties;

private int atual;
Sugestão: private int currentPoliticalParty

private int indice;
Sugestão: private int index

private int qtdDePP;
Sugestão: private int quantityOfPP

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing method that implements requests for requests the political parties
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)

private void recebeParametrosDeListagem()
Comentário: Receive methods for the parameters of the request
Sugestão: private void receiveListParameters

private void estabeleceParametros() throws SQLException
Comentário: Establishes what each parameter will receive
Sugestão: private void setParameters

private void preparaEnvioDeParametros()
Comentário: Prepare responses of forwarded requests
Sugestão: private void prepareParametersTransmission

private int geraIndiceDaLista(List<Partido> lista, int divisor)
Comentário: Generate indexes for list of candidates
Sugestão: private int generateListIndex(List<PoliticalParty> list, int divider)

private int geraIndiceDePaginacao(List<Partido> lista) 
Comentário: Generate index list for paging
Sugestão: private int generatePageIndex(List<PoliticalParty> list)

----------------------------------------------------------------------------------------------------

/ controle.servlet / SelecionarCandidato.java

public class SelecionarCandidato implements Logica 
Comentário: Servlet requests to control the selection of political candidates
Sugestão: public class SelectCandidate implements Logic

private CandidatoControle candidatoControle;
Sugestão: ControlCandidate controlCandidate

private Candidato candidato;
Sugestão: ControlCandidate candidate

private List<Campanha> listaCampanha;
Sugestão: private List<Campaign> campaignList

private String tituloEleitoral;
Sugestão: private String electoralTitle
	
private MovimentacaoControle movimentacaoControle;
Sugestão: controlTransactions controlTransactions

private List<Receita> listaReceita;
Sugestão: private List<Revenue> revenueList

private List<Despesa> listaDespesa;	
Sugestão: private List<Expense> expenseList

private float despesaMax2002;
Sugestão: private float maximumExpenseIn2002

private float despesaMax2006;
Sugestão: private float maximumExpenseIn2006

private float despesaMax2010;
Sugestão: private float maximumExpenseIn2010
	
private float despesaCalc2002;
Sugestão: private float expenseCalculatedValueIn2002

private float receitaCalc2002;
Sugestão: private float revenueCalculatedValueIn2002
	
private float despesaCalc2006;
Sugestão: private float expenseCalculatedValueIn2006

private float receitaCalc2006;
Sugestão: private float revenueCalculatedValueIn2006

private float despesaCalc2010;
Sugestão: private float expenseCalculatedValueIn2010

private float receitaCalc2010;
Sugestão: private float revenueCalculatedValueIn2010

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing method that implements requests for selection of a candidate in all their years of election campaign 
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)


----------------------------------------------------------------------------------------------------

/ controle.servlet / SelecionarPartido.java

public class SelecionarPartido implements Logica
Comentário: Servlet requests to control the selection of political parties
Sugestão: public class SelectPoliticalParty implements Logic

private final int[] ANOS = {2010, 2006, 2002};
Sugestão: private final int [] ELECTIONYEARS = {2010, 2006, 2002}

private PartidoControle partidoControle;
Sugestão: private controlPoliticalParty controlPoliticalParty

private Partido partido;
Sugestão: private PoliticalParty politicalParty

private String sigla;
Sugestão: private String originalPartyAcronym

private String siglaComUnder;
Sugestão: partyAcronymWithUnderlineInsteadOfWhitespace

private String linkTSE;
Sugestão: partyAcronymToBeUsedToMakeTSELink

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing  method that implements requests for the selection of one of the political parties in accordance with its logo and other information
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)

private String trocaDeCaracteresEspeciais(Partido partido)
Comentário: Method for exchanging special characters emanating from the database
Sugestão: private String changeSpecialCharacters(PoliticalParty politicalParty)

----------------------------------------------------------------------------------------------------

/ controle.servlet / ServletControle.java

public class ServletControle extends HttpServlet
Comentário: Controller servlet instance
Sugestão: public class ControlServlet extends HttpServlet

String parametro
Sugestão: String parameter

String nomeDaClasse
Sugestão: nameOfClass

Class<?> classe = Class.forName(nomeDaClasse);
Sugestão: Class<?> class = Class.forName(nameOfClass)

Logica logica = (Logica) classe.newInstance();
Sugestão: Logic logic = (Logic) class.newInstance();

String pagina
Sugestão: String page

----------------------------------------------------------------------------------------------------

/ controle.servlet / VisualizarCandidatosPartido.java

public class VisualizarCandidatosPartido implements Logica
Comentário: Servlet request to control display political candidate
Sugestão: public class VisualizeCandidateOfPoliticalParty implements Logic

private ArrayList<Campanha> listaCampanhas;
Sugestão: private ArrayList<Campaign> campaignList 

private String sigla;
Sugestão: private String partyAcronym

private String ano;
Sugestão: private String electionYear

private HttpServletRequest req;
Sugestão: private HttpServletRequest request

private int inicio;
Sugestão: private int first

private int qtdPorPagina;
Sugestão: private int quantityPerPage

private boolean verTodos;
Sugestão: private boolean seeAllPoliticalParties

private int atual;
Sugestão: private int actual

private int indice;
Sugestão: private int index

private int qtdDePP;
Sugestão: private int quantityOfPP

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing method that implements requests for display of a candidate in all their years of election campaign 
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)

private void recebeParametros() 
Comentário: Receive methods for the parameters of the request
Sugestão: private void receiveParameters

private void estabeleceParametros() throws SQLException 
Comentário: Establishes what each parameter will receive
Sugestão: private void setParameters

private void preparaEnvioDeParametros() 
Comentário: Prepare responses of forwarded requests
Sugestão: private void prepareParametersTransmission

private int geraIndiceDaLista(List<Campanha> lista, int divisor) 
Comentário: Generate indexes for list of candidates
Sugestão: ṕrivate int generateCandidateListIndexes

private int geraIndiceDePaginacao(List<Campanha> lista) 
Comentário: Generate index list for paging
Sugestão: private int generatePageIndex(List<Campaign> list)

----------------------------------------------------------------------------------------------------

/ controle.servlet / VisualizarResultadoListaBuscaCandidato.java

public class VisualizarResultadoListaBuscaCandidato implements Logica
Comentário: Servlet requests to control display search result list of candidates
Sugestão: public class VisualizeResultOfSearchCandidateList implements Logic

private CandidatoControle controle;
Sugestão: private ControlCandidate control

private List<Candidato> listaCandidatos;
Sugestão: private List<Candidate> candidateList

private String nome;
Sugestão: private String candidateName

private HttpServletRequest req;
Sugestão: private HttpServletRequest request

private int inicio;
Sugestão: private int firstCandidate

private int qtdPorPagina;
Sugestão: private int quantityCandidatePerPage

private boolean verTodos;
Sugestão: private boolean seeAllCandidates

private int indice;
Sugestão: private int index

private int qtdDePP;
Sugestão: private int quantityOfPP

private int centro;
Sugestão: private int centerCandidate

private int minRaio;
Sugestão: private int minimumRadius

private int maxRaio;
Sugestão: private int maximumRadius

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing method that implements requests for display the result of the search list of candidates 
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)

private void recebeParametros() throws SQLException
Comentário: Receive methods for the parameters of the request
Sugestão: private void receiveParameters() throws SQLException

private void estabeleceParametros()
Comentário: Establishes what each parameter will receive
Sugestão: private void setParameters()

private void preparaEnvioDeParametros() 
Comentário: Prepare responses of forwarded requests
Sugestão: private void prepareParametersTransmission

private int geraIndiceDaLista(List<Candidato> lista, int divisor)
Comentário: Generate indexes for list of candidates
Sugestão: private int generateListIndex(List<Candidate> list, int divider)

private int geraIndiceDePaginacao(List<Candidato> lista)
Comentário: Generate index list for paging
Sugestão: private int generatePageIndex(List<Candidate> list)

private void estabeleceRaioDePaginacao()
Comentário: Logic for implementing paging
Sugestão: private void setRadiusPageCandidate

----------------------------------------------------------------------------------------------------

/ controle.servlet / VisualizarTopFive.java

public class VisualizarTopFive implements Logica
Comentário: Servlet requests to control display TOP Five
Sugestão: public class VisualizeTopFive implements Logic

private CampanhaControle campanhaControle;
Sugestão: private ControlCampaign controlCampaign
	
private ArrayList<Campanha> listaCampanha;
Sugestão: private ArrayList<Campaign> campaignList
	
private String cargo;
Sugestão: private String position

private Integer ano;
Sugestão: private Integer electionYear	

HttpServletRequest req;
Sugestão: HttpServletRequest request

public String executa(HttpServletRequest req, HttpServletResponse res)
Comentário: Concretizing method that implements requests for display the search result of the TOP Five 
Sugestão: public String execute(HttpServletRequest request, HttpServletResponse response)

private void recebeParametros()
Comentário: Receive methods for the parameters of the request
Sugestão: private void receiveParameters()

private void estabeleceParametros() throws SQLException
Comentário: Establishes what each parameter will receive
Sugestão: private void setParameters() throws SQLException

private void preparaEnvioDeParametros()
Comentário: Prepare responses of forwarded requests
Sugestão: private void prepareParametersTransmission()

---------------------------------------------------------------------------------------------------
 
 controle.excecao / PartidoExcecao.java
 
 public class PartidoExcecao extends Exception 
 Comentário: Exception class electoral party, which mediates the application layer with the model
 Sugestão: politicalPartiesException

 public PartidoExcecao()
 Sugestão: PoliticalPartiesException()

---------------------------------------------------------------------------------------------------
 
 controle.validacao / PartidoValidacao.java

 public class PartidoValidacao
 Comentário: Validation class electoral party, which mediates the application layer with the model
 Sugestão: politicalPartiesValidation

 private static final String SIGLA_VAZIA = "Campo Sigla do Partido vazia!"
 Sugestão: public static final int EMPTY_SIGLA = "Party abbreviation field empty"
 Comentário: Constant for represent sigla empty

 private static final String NUMERO_PARTIDO_VAZIO = "Campo Número do Partido vazio!";
 Sugestão: public static final int EMPTY_NUMBER_PARTY = "Party number field empty"
 Comentário: Constant for represent the number of party

 public PartidoValidacao()
 Sugestão: PoliticalPartiesValidation()

 public void siglaNaoNula(Partido partido) throws PartidoExcecao
 Sugestão: public void siglaNotNull (Party party) throws PartyException

 public void numeroNaoNulo(Partido partido) throws PartidoExcecao
 Sugestão: public void numberNotNull (Party party) throws PartyException

---------------------------------------------------------------------------------------------------
 
 controle / CampanhaControle.java

 public class CampanhaControle
 Comentário: Control class political campaign, which mediates the application layer with the model
 Sugestão: campaignControl

 private CampanhaDAO campanhaDAO
 Sugestão: CampaignDAO

 public CampanhaControle()
 Sugestão: ControlCampaign()

 public ArrayList<Campanha> getListaCampanhas(Candidato candidato)
 Comentário: Manter comentario do metodo
 Sugestão: public ArrayList<Campaign> getListCampaign(Candidate candidate)

 public ArrayList<Campanha> getListaCampanhasPorSiglaPartidoEAno(String sigla, String ano)
 Comentário: Manter comentario do metodo
 Sugestão: public ArrayList<Campaign> getListCampaignBySiglaPartyAndYear(String sigla, String year)

 public ArrayList<Campanha> topFivePorCargoEAno(String cargo, Integer ano)
 Comentário: Manter comentario do metodo
 Sugestão: public ArrayList<Campaign> topFiveByPositionAndYear(String position, Integer year)

 public Campanha getPeloAnoNumeroCodCargoEUf(Campanha campanha)
 Comentário: Manter comentario do metodo
 Sugestão: public Campaign getByYearNumberCodePositionAndUF(Campaign campaign)

---------------------------------------------------------------------------------------------------
 
 controle / CandidatoControle.java

 public class CandidatoControle
 Comentário: Control class candidate, which mediates the application layer with the model
 Sugestão: controlCandidate

 private CandidatoDAO candidatoDAO;
 Sugestão: candidateDAO

 public CandidatoControle()
 Sugestão: ControlCandidate()

 public LinkedList<Candidato> getListaCandidatos(String nome) 
 Comentário: Manter comentario do metodo
 Sugestão: public LinkedList<Candidate> getListCandidate(String name)

 public Candidato getUmCandidato(String tituloEleitoral)
 Comentário: Manter comentario do metodo
 Sugestão: public Candidate getACandidate(String ElectoralTitle)

---------------------------------------------------------------------------------------------------

 controle / MovimentacaoControle.java

 public class MovimentacaoControle
 Comentário: Control class Transactions financial, which mediates the application layer with the model
 Sugestão: controlTransactions

 DespesaDAO despesaDAO;
 Sugestão: expensesDAO

 ReceitaDAO receitaDAO;
 Sugestão: revenueDAO

 public MovimentacaoControle()
 Sugestão: ControlTransactions()

 public List<Receita> getListaReceitas(Campanha campanha) 
 Comentário: Manter comentario do metodo
 Sugestão: public List<Revenue> getListRevenue(Campaign campaign)

 public List<Despesa> getListaDespesas(Campanha campanha) 
 Comentário: Manter comentario do metodo
 Sugestão: public List<Expense> getListExpenses(Campaign campaign))

 public Receita getReceitaPeloId(int id)
 Comentário: Manter comentario do metodo
 Sugestão: public Revenue getRevenueById(int id)

 public Despesa getDespesaPeloId(int id) 
 Comentário: Manter comentario do metodo
 Sugestão: public Expense getExpenseById(int id)

---------------------------------------------------------------------------------------------------

 controle / PartidoControle.java

 public class PartidoControle
 Comentário: Control class political party, which mediates the application layer with the model
 Sugestão: controlParty

 private PartidoDAO partidoDAO;
 Sugestão: partyDAO

 public PartidoControle()
 Sugestão: ControlParty()

 public ArrayList<Partido> getListaTodosPartidos()
 Comentário: Manter comentario do metodo
 Sugestão: public ArrayList<Party> getListAllParties()

 public Partido getPelaSigla(String sigla)
 Comentário: Manter comentario do metodo
 Sugestão: public Party getBySigla(String sigla)

 public Partido getPeloNumero(String numero)
 Comentário: Manter comentario do metodo
 Sugestão: public Party getByNumber(String number)