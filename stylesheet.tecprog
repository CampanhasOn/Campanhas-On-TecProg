
					------- FOLHA DE ESTILO CAMPANHAS-ON -------


 Neste documento está descrito padrões de codificação exigidos pelo projeto.
 Cabe ressaltar que tais padrões auxiliam no desenvolvimento e principalmente na manutenção
 de futuras implementações.
 Observe atentamente cada ponto, em caso de discordâncias, entre em contato com a equipe de
 desenvolvimento.

 0 - Sumário
 	1. Introdução
 	2. Padrões de Escrita para Implementações na Linguagem Java
 		2.1 Comentários
 			2.1.1 Na Programação
 			2.1.2 Em Commits
 		2.2 Variáveis
 		2.3 Classes
 		2.4 Métodos
 			2.4.1 Getters and Setters
 			2.4.2 Métodos de Classe
 			2.4.3 Métodos de Instância
 		2.5 Importações
 	3. Padrões de Escrita para Implementações na Linguagem HTML e CSS
 	4. Exemplo de Implementação de uma Classe Seguindo as Normas Propostas
 		
 1 - Introdução
 	Este documento está divividido em seções, ao qual é possível encontrar as especificações
 	de cada implementação.


 2 - Padrões de Escrita para Implementações na Linguagem Java

 	Os padrões a seguir deverão obrigatoriamente ser respeitados para validação de seus commits.
 	Cabe ainda ressaltar que todas as implementações do projeto deverão estar na lingua natural
 	de sua linguagem de programação mãe, portanto, em inglês.

	2.1	Comentários

		2.1.1	Na Programação

 			Serão utilizados apenas dois tipos de comentários. Os seguidos de "//" no qual
 			servirão para ressaltar pequenas observações e os dentre "/* */" no qual
 			documentarão dado classe, métodos, entre outros.
 			
 			2.1.1.1	Não deverá saltar linhas após o comentário, nem há necessidade de uso
 				de um ponto final ao final.

 			2.1.1.2	Comentários de ressalva deverão ser espaçados após as duas barras e
 				iniciados em letras maiuscula.
 				
 				Exemplo:
 				// An Example of Single Line Commentary
 				<Conteúdo>

 			2.1.1.3	Comentários de documentação deverão ser utilizados após um método ou
 				classe ou qualquer outra função que haja necessidade de documentação.
 				É opcional o uso de um título para esse tipo de comentário.
 				
 				Exemplo:
 				/* <Opcional> A Title
 				 * An Example of Two Lines Commentary
 				 * An Second Line
 				 */
 				<Conteúdo>
 				
		2.1.2	Em Commits

 			2.1.2.1	Todo commit deverá obrigatoriamente possuir um comentário descrevendo
 				de forma sucinta a implementação deste, em inglês.
 				Vale ressaltar que os commits DEVEM ser pequenos mas compreender uma
 				funcionalidade do projeto.

	2.2	Variáveis

		2.2.1	Os nomes das variáveis deverão RESPEITAR os padrões impostos pela linguagem de
			programação utilizada (neste caso Java).

		2.2.2	Variáveis deverão ser locais, evitando ao máximo variáveis de cunho global.

		2.2.3	Os nomes das variáveis deverão ter um significado relacionado à sua implementação.

		2.2.4	Em todas as classes e métodos, as variáveis deverão ser instanciadas no inicio de
			seus respectivos blocos de comando.
			
		2.2.5	Em hipótese alguma deverá ser instanciado mais que uma variável por linha.
		
		2.2.6	Deverá prevalecer o uso de Tipos de Classes em casos que existam tal tipo.
		
		2.2.7	É obrigatório o uso de encapsulamento ao se instanciar uma variável.
		
			Exemplo Correto:
			private Integer variable;
			private Integer aSecondVariable;
			protected String aThirdVariable;
			protected Boolean aFourthVariable;
			
			Exemplo Incorreto:
			int variable, asecondvariable;
			String a_third_variable;
			bool afourthvariable_;
 
	2.3	Classes

 		2.3.1	Os nomes das classes deverão RESPEITAR os padrões impostos pela linguagem de
 			programação utilizada (neste caso Java).

 		2.3.2	Os nomes das classes deverão ter um significado relacionado à sua implementação.

 		2.3.3	Todas as classes deverão ser devidamente comentadas de acordo com sua respectivas
 			funções dentro do sistema.
 			
 		2.3.4	Deve-se abrir a chave da classe na mesma linha de sua declaração.
 		
 		2.3.5	É obrigatório o uso de encapsulamento ao se criar uma classe.
 		
 			Exemplo Correto:
 			public class Object {
 			
 			Exemplo Incorreto:
 			class object
 			{

 		2.3.6	Todas classe deverá ser organizada da seguinte forma:
 		
 			1º Importações;
 			2º Tipo e nome da classe e suas respectivas extensões;
 			3º Documentação da classe;
 			4º Declaração de variáveis e constantes, caso necessário;
 			5º Construtores de classe;
 			6º Getters e Setters, caso necessário;
 			7º Métodos de Classe, caso necessário;
 			8º Métodos de Instância, caso necessário;
 			
 			2.3.6.1	Importações
 			
 				Assumirá o padrão de organização da IDE Eclipse.
 			
 	2.4	Métodos

 		2.4.1	Os nomes dos métodos deverão RESPEITAR os padrões impostos pela linguagem de
 			programação utilizada (neste caso Java).
 			
 		2.4.2 	Os nomes dos métodos deverão ter um significado relacionado à implementação.

 		2.4.3	Todos os métodos deverão estar documentados de acordo com sua implementação,
 			e caso necessário, algumas de sua linhas de comando.

 		2.4.4	Todos os métodos deverão ter uma análise informal prévia de sua implementações
 			para que sejam evitados GIGO em sua implementação.
 			
 		2.4.5	Não há espaçamento entre os parênteses dos parâmetros do método.
 		
 		2.4.6	Há um espaçamento entre os parâmetros do método, após a vírgula.
 		
 		2.4.7	Método de classe é necessário encapsulamento.
 		
 		2.4.8	Deve-se abrir a chave do método na mesma linha de sua declaração.
 		
 		2.4.9	Deverá prevalecer o uso de Tipos de Classes em casos que existam tal tipo.
 		
 			Exemplo Correto:
 			private Integer sum(Integer firstNumber, Integer secondNumber) {
 			(...)
 			z = sum(x, y);
 			(...)
 			
 			Exemplo Incorreto:
 			int Sum (int First, int Second)
 			{
 			(...)
 			z = Sum ( x,y ) ;
 			(...)
 			
 		2.4.10	Getters e Setters

 			2.4.10.1	Getters e Setters deverão ser, a princípio, privados e seus
 					acessos deverão ser feitos por intermédio de específicas de
 					cadastro.

 			2.4.10.2	Getters e Setters deverão ter em sua implementação restrições
 					de acesso e modificação, visando segurança as suas respectivas
 					variavéis.

 			2.4.10.3	Para que Getters e Setters sejam públicos, deverão haver
 					comentários documentados justificando sua implementação.

		2.4.11	Métodos de Classe

 			2.4.11.1	Deverá haver um cuidado minucioso no uso destes métodos.
 					Portanto, suas implementações devem ser justificadas por meio
 					de comentário de documentação.

		2.4.12	Métodos de Instância

 			2.4.12.1	Sua documentação deverá anteceder a sua declaração.

 	2.5	Importações 

		2.5.1	Seguirão o padrão proposto pela IDE (Crtl+Shift+O) sucedidos de uma linha em branco.

 3 - Padrões de escrita para implementações na linguagem HTML e CSS.

 Os padrões a seguir deverão obrigatoriamente ser respeitados para validação de seus commits.

 4 - Exemplo de implementação de uma classe seguindo as normas propostas.

public class Example extends ExampleTwo {

	// Example of One Line Comment ||(Sem ponto final)

	/*
	 * Example of Two Lines Comments
	 * End of Comment
	 */

	// Attributes
	public static final String EXAMPLE = "Contents";
	private Integer camelCaseExample;

	// Constructors	
	public Example() {
		super();
	}
	
	public Example(Integer camelCaseExample) {
		super();
		this.camelCaseExample = camelCaseExample;
	}

	// Getters and Setters
	public Integer getCamelCaseExample() {
		return camelCaseExample;
	}

	public void setCamelCaseExample(Integer camelCaseExample) {
		this.camelCaseExample = camelCaseExample;
	}
	
	// This method verify if an Object is equals to the owner of the method
	@Override
	public Boolean exampleOfEqualsMethod(Object object) {
		if(!(object instanceof Example)) {
			return false;
		} else {
			Example otherExample = (Example) object;
			Boolean longBooleanComparator =
				this.camelCaseExample.equals(otherExample.getCamelCaseExample()) &&
				|| Outras comparações
			return longBooleanComparator;
		}
	}

	/*
	 * This method returns an Integer that represents an multiplication 
	 * between camelCaseExample and another Integer
	 * @param an integer argument
	 * @return the test results
	 * /
	public Integer multiplyCamelCases(Integer multiplyFactor) {
		Integer currentIndex;
		Integer result = 0;
		for(currentIndex = 0; currentIndex <= multiplyFactor; currentIndex++) {
			result += this.camelCaseExample;
		}
		return result;
	}
}
