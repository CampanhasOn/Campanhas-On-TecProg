
					------- FOLHA DE ESTILO CAMPANHAS-ON -------


 Neste documento serão encontrados padrões de codificações exigidos pelo projeto.
 Cabe ressaltar que tais padrões auxiliam no desenvolvimento e principalmente na manutenção de futuras implementações.
 Observe atentamente cada ponto, em caso de discordâncias, entre em contato com a equipe de desenvolvimento.

 1 - Introdução

 Este documentos será divividido em seções, ao qual é possível encontrada as especificações de cada implementação.


 2 - Padrões de escrita para implementações na linguagem Java.

 Os padrões a seguir deverão obrigatoriamente ser respeitados para validação de seus commits. Cade ainda ressaltar que todas implementações do projeto
 deverão estar na lingua natural de sua linguagem de programação mãe, portanto em inglês.

 2.1 - Comentários

 2.1.1 - Na programação

 	Serão utiliados apenas dois tipos de comentários. Os seguindos de "//" no qual servirão para ressaltar pequenas obserações
 	e os dentre "/* */" no qual documentarão dado classe, método entre outros.

 	2.1.1.1 Comentários de ressalva deverão ser espaçados após as duas barras e iniciados em letras maiuscula.
 		  Além do mais, não deverão soltar uma linha após o texto.

 	2.1.1.2 Comentários de documentação deverão ser utilizados após um método ou classe ou qualquer outra função que haja necessidade de documentação.
 		  Além do mais, deverão soltar uma linhas após o texto.

	2.1.1.3 Comentários não deverão possuir ponto final ao final.


 2.1.2 - Nos commits

 	2.1.2.1 Todos commits deverão obrigatoriamente haver um comentário descrevendo de forma sucinta a implementação deste, em inglês.
 	Vale ressaltar que os commits DEVEM ser pequenos mas compreender uma funcionalidade do projeto.

 2.2 - Variáveis

	2.2.1 Os nomes das variáveis deverão RESPEITAR os padrões impostos pela linguagem de programação utilizada (neste caso Java).

	2.2.2 Variáveis deverão ser locais, evitando ao máximo variáveis de cunho global.

	2.2.3 Os nomes das variáveis deverão ter um significado significantes para sua implementação.

	2.2.4 Em todas as classes e métodos, as variáveis deverão ser instanciadas no inicio de seus respectivos blocos de comando.
 
 2.3 - Classes

 	2.3.1 Os nomes das classes deverão RESPEITAR os padrões impostos pela linguagem de programação utilizada (neste caso Java).

 	2.3.2 Os nomes das classes deverão ter um significado significantes para sua implementação.

 	2.3.3 Todas as classes deverão ser devidamente comentadas de acordo com sua respectivas funções dentro do sistema.

 	2.3.4 Todas as classes deverão necessariamente ter a seguinte implementação:
 			1º Importações;
 			2º Tipo e nome da classe e seus respectivas extensões;
 			3º Documentação da classe;
 			4º Declaração de variáveis e constantes, caso necessário;
 			5º Construtores de classe;
 			6º Getters e Setters;
 			7º Métodos de Classe;
 			8º Métodos de Instância;

 2.4 - Métodos

 	2.4.1 Os nomes dos métodos deverão RESPEITAR os padrões impostos pela linguagem de programação utilizada (neste caso Java).

 	2.4.2 Os nomes dos métodos deverão ter um significado significantes para sua implementação.

 	2.4.3 Todos os métodos deverão estar documentados de acordo com sua implementação, e caso necessário, algumas de sua linhas de comando.

 	2.4.4 Todos os métodos deverão ter uma análise informal prévia de sua implementações para que sejam evitados GIGO em sua implementação.

 2.4.1 - Getters e Setters

 	2.4.1.1 Gets e Sets deverão ser, a princípio, privados e seus acessos deverão ser feitos por intermédio de específicas de cadastro.

 	2.4.1.2 Gets e Sets deverão ter em sua implementação restrições de acesso e modificação, visando segurança as suas respectivas variavéis.

 	2.4.1.3 Para que Gets e Sets sejam publicos, deverão haver comentários documentados justificando sua implementação.

 2.4.2 - Métodos de Classe

 	2.4.2.1 Deverá haver um cuidado minucioso no uso destes métodos. Portanto, sua implementações devem ser justificadas por meio de comentário de documentação.

 2.4.3 - Métodos de Instância

 	2.4.3.1 Sua documentação deverá anteceder a sua declaração.

 2.5 - Importações 

 	2.5.1 Seguirão o padrão proposto pela IDE (Crtl+Shift+O) sucedidos de uma linha em branco.


 3 - Padrões de escrita para implementações na linguagem HTML e CSS.

 Os padrões a seguir deverão obrigatoriamente ser respeitados para validação de seus commits.




4 - Exemplo de implementação de uma classe seguindo as normas propostas.

public class Example extends ExampleTwo {

	// Example of One Line Comment ||(Sem ponto final)

	/*
	 * Example of Two Lines Comments
	 * End of Comment
	 */

	// Attributes
	public static final String EXAMPLE = "Contents";
	private Integer camelCaseExample;

	// Constructors	
	public Example() {
		super();
	}
	
	public Example(Integer camelCaseExample) {
		super();
		this.camelCaseExample = camelCaseExample;
	}

	// Getters and Setters
	public Integer getCamelCaseExample() {
		return camelCaseExample;
	}

	public void setCamelCaseExample(Integer camelCaseExample) {
		this.camelCaseExample = camelCaseExample;
	}
	
	// This method verify if an Object is equals to the owner of the method
	@Override
	public Boolean exampleOfEqualsMethod(Object object) {
		if(!(object instanceof Example)) {
			return false;
		} else {
			Example otherExample = (Example) object;
			Boolean longBooleanComparator =
				this.camelCaseExample.equals(otherExample.getCamelCaseExample()) &&
				|| Outras comparações
			return longBooleanComparator;
		}
	}

	/*
	 * This method returns an Integer that represents an multiplication 
	 * between camelCaseExample and another Integer
	 * /
	public Integer multiplyCamelCases(Integer multiplyFactor) {
		Integer currentIndex;
		Integer result = 0;
		for(currentIndex = 0; currentIndex <= multiplyFactor; currentIndex++) {
			result += this.camelCaseExample;
		}
		return result;
	}
}
